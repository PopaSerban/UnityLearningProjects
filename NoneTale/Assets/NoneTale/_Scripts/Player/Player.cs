using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Player : MonoBehaviour
{

    //create singleton PLayer /////////////////////////////
    private static Player _instance;

    public static Player Instance
    {
        get
        {
            if (_instance == null)
            {
                GameObject player =GameObject.Find("PLayer");
                player.AddComponent<Player>();
            }
            return _instance;
        }
        
    }
    /// <summary>
    /// ////////////////////////////////////////////
    /// </summary>
    //Objects access 
    public Rigidbody2D _rigidbody2D;

    public Animator _animator;

    //Interface Refference
    private IUseable useable;


    //player serialized  variables
    [SerializeField]
    private float _speed = 2f;
    [SerializeField]
    private float _jumpForce = 5f;
    [SerializeField]
    private LayerMask whatIsGround;

    //Array for checking if grounded
    [SerializeField]
    private Transform[] _groundPoints;

    [SerializeField]
    private float _dashForce;

    //player unserialized variables
    private bool _isFacingRight;

    //check if player is grounded;
    private bool _isGrounded;
    private bool _jump;
    private bool _canDoubleJump;
    private bool _jumpAttack;

    //handle attack
    private bool _attack;
    //handle dash
    private bool _dash;
    //handle the number of dashes availible
    private int _dashCount=0;

    //climbing variables 
    public bool _onTree;

    private void Awake()
    {
        _instance = this;
    }

    [SerializeField]
    private float _climbSpeed;
	// Use this for initialization
	void Start ()
    {
        _onTree = false;
        _rigidbody2D = GetComponent<Rigidbody2D>();
        _animator = GetComponent<Animator>();
        _isFacingRight = true;
	}
	
	// Update is called once per frame
	void Update ()
    {
        Movement();
        HandleLayers();
        //check if grounded;
        _isGrounded = IsGrounded();

        if (Input.GetKeyDown(KeyCode.W))
        {
            _jump = true;
            Jump();
        }
        else _jump = false;
        if (Input.GetMouseButtonDown(0))
        {
            _attack = true;
            _jumpAttack = true;
            HandleAttacks();
        }
        else
        {
            _attack = false;
            _jumpAttack = false;
            _animator.SetBool("airAttack", false);
        }
        //Climb();
        if (Input.GetKeyDown(KeyCode.E))
        {
            Use();
            
        }
        Climb();




    }

    //handles the movement 
    public void Movement()
    {
        float _horizontalInput = Input.GetAxis("Horizontal");

        //check for flipping
        if (_horizontalInput > 0 && !_isFacingRight||_horizontalInput<0 && _isFacingRight)
        {
            _isFacingRight = !_isFacingRight;

            Vector3 _playerScale = transform.localScale;
            _playerScale.x *= -1;
            transform.localScale = _playerScale;
        }
      

        //connects to Animatior component from Unity 
        //sets the transition variable between idle and run with the value of imput value generated by input horizontal
        _animator.SetFloat("speed", Mathf.Abs(_horizontalInput));

        _rigidbody2D.velocity = new Vector2(_horizontalInput * _speed, _rigidbody2D.velocity.y);

        HandleDash(_horizontalInput);

        //checks if the players starts falling
        if (_rigidbody2D.velocity.y < 0)
        {
            _animator.SetBool("land", true);
        }


    }

    public void Jump()
    {
        //handle jumping
        if (_isGrounded && _jump)
        {

            _isGrounded = false;
            _animator.SetTrigger("Jump");
            _canDoubleJump = true;
            _rigidbody2D.AddForce(Vector2.up * _jumpForce);
        }
        else if(_canDoubleJump)
        {
            _canDoubleJump = false;
            _rigidbody2D.velocity = new Vector2(_rigidbody2D.velocity.x, 0);
            
            _rigidbody2D.AddForce(Vector2.up * (_jumpForce/1.2f));

        }
        
    }

    private void Climb()
    {
        if (_onTree)
        {
            float _horizontalInput_ = Input.GetAxis("Horizontal");
            float _verticalInput_ = Input.GetAxis("Vertical");
            _rigidbody2D.gravityScale = 0;
            _rigidbody2D.velocity = new Vector2(_horizontalInput_ * _climbSpeed, _verticalInput_ * _climbSpeed);
        }
        
    }


    private void HandleAttacks()
    {
        if (_attack || _isGrounded)
        {
            _animator.SetTrigger("isAttaking");
            
        }
        if(_jumpAttack && !_isGrounded)
        {
            _animator.SetBool("airAttack", true);
        }
       
    }

    private void HandleDash(float _horizontalInput)
    {

        if (Input.GetKeyDown(KeyCode.LeftShift) &&_horizontalInput!=0f)
        {
            _dashCount++;
            if (_dashCount < 3)
            {
                
                _animator.SetBool("dash", true);
                _rigidbody2D.AddForce(new Vector2(_horizontalInput * _dashForce, 0));
                StartCoroutine(DashCooldownCoroutine());

            }
            
        }
        else
        {
            _animator.SetBool("dash", false);
        }
    }

   


    private bool IsGrounded()
    {
        if (_rigidbody2D.velocity.y <= 0)
        {
            foreach(Transform point in _groundPoints)
            {
                //takes all the 3 colliders and using Physics2D checks if they overlap other colliders
                Collider2D[] colliders = Physics2D.OverlapCircleAll(point.position, 0.02f,whatIsGround);

                for(int i = 0; i < colliders.Length; i++)
                {
                    if (colliders[i].gameObject != gameObject)
                    {
                        _animator.ResetTrigger("Jump");
                        _animator.SetBool("land", false);
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private void HandleLayers()
    {
        if (!_isGrounded)
        {
            _animator.SetLayerWeight(1, 1);
        }
        else
        {
            _animator.SetLayerWeight(1, 0);
        }
    }

    private void Use()
    {
        if (useable != null)
        {
            Debug.Log(useable);
            useable.Use();
            
        }
    }

    public void OnTriggerEnter2D(Collider2D collision)
    {
        if(collision.tag=="Climb Tree")
        {
           // Debug.Log("collided");
            useable = collision.GetComponent<IUseable>();
           // Debug.Log(useable);
        }
    }

    private void OnTriggerExit2D(Collider2D collision)
    {
        if(collision.tag=="Climb Tree")
        {
            useable = null;
        }
    }

    private IEnumerator DashCooldownCoroutine()
    {
        
        yield return new WaitForSeconds(10.2f);
        _dashCount--;
        

    }
    
}



